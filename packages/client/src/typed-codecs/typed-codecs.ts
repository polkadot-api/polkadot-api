import { type ChainDefinition } from "@/descriptors"
import {
  getDynamicBuilder,
  getLookupFn,
  MetadataLookup,
} from "@polkadot-api/metadata-builders"
import { decAnyMetadata, unifyMetadata } from "@polkadot-api/substrate-bindings"
import { TypedCodecs } from "./types"

export const createConstantEntry = (
  palletName: string,
  name: string,
  lookup: MetadataLookup,
  { buildConstant }: ReturnType<typeof getDynamicBuilder>,
) => {
  const pallet = lookup.metadata.pallets.find((p) => p.name === palletName)
  const constant = pallet?.constants.find((c) => c.name === name)
  if (constant == null)
    throw new Error(`Runtime entry Constant(${palletName}.${name}) not found`)
  return buildConstant(palletName, name)
}

const withError =
  <T>(
    builder: (pallet: string, name: string) => T,
    errName: string,
  ): ((pallet: string, name: string) => T) =>
  (pallet, name) => {
    try {
      return builder(pallet, name)
    } catch {
      throw new Error(`Runtime entry ${errName}(${pallet}.${name}) not found`)
    }
  }

/**
 * It provides access the codecs of all possible on-chain interactions.
 *
 * @param descriptors  Pass descriptors from `@polkadot-api/descriptors`
 *                     generated by `papi` CLI.
 */
export const getTypedCodecs = async <D extends ChainDefinition>(
  descriptors: D,
): Promise<TypedCodecs<D>> => {
  const metadata = unifyMetadata(
    decAnyMetadata(await descriptors.getMetadata()),
  )
  const target = {}
  const createProxy = (propCall: (prop: string) => unknown) =>
    new Proxy(target, {
      get(_, prop) {
        return propCall(prop as string)
      },
    })
  const createProxyPath = <T>(pathCall: (a: string, b: string) => T) => {
    const cache: Record<string, Record<string, T>> = {}
    return createProxy((a) => {
      if (!cache[a]) cache[a] = {}
      return createProxy((b) => {
        if (!cache[a][b]) cache[a][b] = pathCall(a, b)
        return cache[a][b]
      })
    }) as Record<string, Record<string, T>>
  }

  const lookup = getLookupFn(metadata)
  const {
    buildRuntimeCall,
    buildStorage,
    buildConstant,
    buildCall,
    buildEvent,
  } = getDynamicBuilder(lookup)

  return {
    query: createProxyPath((...a) => {
      const { value, args } = withError(buildStorage, "Storage")(...a)
      return { value, args }
    }),
    tx: createProxyPath((...a) => withError(buildCall, "Call")(...a).codec),
    event: createProxyPath(
      (...args) => withError(buildEvent, "Event")(...args).codec,
    ),
    apis: createProxyPath(withError(buildRuntimeCall, "Runtime API")),
    constants: createProxyPath(withError(buildConstant, "Constant")),
  } as TypedCodecs<D>
}
